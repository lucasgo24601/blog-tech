[
  1,
  [
    "39+Eq53pdByoU4KW7VjMLc",
    "8dRHtfYCZDHKKnK5ttR+ld",
    "eaUWstD+tPVqOPjaI0dgx2"
  ],
  [
    "_effectAsset",
    "_textureSetter"
  ],
  [
    "cc.SpriteFrame",
    "cc.Texture2D",
    [
      "cc.Material",
      [
        "_name",
        "_techniqueData"
      ],
      1
    ],
    [
      "cc.TextAsset",
      [
        "_name",
        "text"
      ],
      1
    ],
    [
      "cc.EffectAsset",
      [
        "_name",
        "shaders",
        "techniques"
      ],
      0
    ]
  ],
  [
    [
      2,
      0,
      1,
      3
    ],
    [
      3,
      0,
      1,
      3
    ],
    [
      4,
      0,
      1,
      2,
      4
    ]
  ],
  [
    [
      [
        {
          "name": "pl_3",
          "rect": [
            0,
            0,
            686,
            40
          ],
          "offset": [
            0,
            0
          ],
          "originalSize": [
            686,
            40
          ],
          "capInsets": [
            0,
            0,
            0,
            0
          ]
        }
      ],
      [
        0
      ],
      0,
      [
        0
      ],
      [
        1
      ],
      [
        0
      ]
    ],
    [
      [
        [
          0,
          "FishEffect",
          {
            "0": {
              "props": {
                "intensity": 1
              },
              "defines": {
                "USE_TEXTURE": true
              }
            }
          }
        ]
      ],
      0,
      0,
      [
        0
      ],
      [
        0
      ],
      [
        1
      ]
    ],
    [
      [
        "4,9729,9729,33071,33071,0,0,1",
        -1
      ],
      [
        1
      ],
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          0,
          "Fish_ShadowProjector",
          {
            "0": {
              "props": {
                "value": 0.00125
              },
              "defines": {
                "USE_TEXTURE": true
              }
            }
          }
        ]
      ],
      0,
      0,
      [
        0
      ],
      [
        0
      ],
      [
        2
      ]
    ],
    [
      [
        [
          1,
          "README",
          "# FishFramework\n"
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          2,
          "FishEffect",
          [
            {
              "hash": 4234603317,
              "record": null,
              "name": "FishEffect|vs|fs",
              "glsl3": {
                "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\nuniform Parameter{\n  float intensity;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  #if USE_TINT\n  #endif\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture(texture, v_uv0);\n  #endif\n  if (intensity > 1.0 && o.a < 0.9) {\n    o = vec4(0, 0, 0, 0);\n  } else {\n    o *= intensity;\n  }\n  gl_FragColor = o;\n}"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\nuniform float intensity;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  #if USE_TINT\n  #endif\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n    o *= texture2D(texture, v_uv0);\n  #endif\n  if (intensity > 1.0 && o.a < 0.9) {\n    o = vec4(0, 0, 0, 0);\n  } else {\n    o *= intensity;\n  }\n  gl_FragColor = o;\n}"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "USE_TEXTURE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MODEL",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "USE_TINT",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "ALPHA_TEST",
                  "binding": 0,
                  "members": [
                    {
                      "name": "alphaThreshold",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": [
                    "USE_ALPHA_TEST"
                  ]
                },
                {
                  "name": "Parameter",
                  "binding": 1,
                  "members": [
                    {
                      "name": "intensity",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "texture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": [
                    "USE_TEXTURE"
                  ]
                }
              ]
            }
          ],
          [
            {
              "passes": [
                {
                  "program": "FishEffect|vs|fs",
                  "blendState": {
                    "targets": [
                      {
                        "blend": true
                      }
                    ]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "properties": {
                    "texture": {
                      "value": "white",
                      "type": 29
                    },
                    "alphaThreshold": {
                      "type": 13,
                      "value": [
                        0.5
                      ]
                    },
                    "intensity": {
                      "type": 13,
                      "value": [
                        1
                      ]
                    }
                  }
                }
              ]
            }
          ]
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          1,
          "Fish_GameClient.d",
          "declare class Fish_GameClient extends GameClient {\r\n\r\n    /** 取得廳列表 */\r\n    public themeDataList(param: { fishThemeList: { themeId: number, minCoin: number, jackpot: number, antes: number[]} }): Promise<void>;\r\n    /** 加房 */\r\n    public plus(param: { themeType: number, carryAmount: number }): Promise<void>;\r\n    /** 離開房間 */\r\n    public leave(): Promise<void>;\r\n    /** 更新砲台 */\r\n    public turretUpdate(param: { turretType: number, anteType: number }): Promise<void>;\r\n    /** 子彈碰撞 */\r\n    public hit(param: { anteType: number, fishIds: string[], skillId: string, skillType: number }): Promise<void>;\r\n    /** 追加攜帶金額 */\r\n    public additionCarryAmount(param: { amount: number }): Promise<void>;\r\n    /** 開火 */\r\n    public fire(param: { angle: number, anteType: number, lockFishId: string, skillId: string, skillType: number }): Promise<void>;\r\n\r\n    /** 註冊加入房間的通知 */\r\n    public setOnSelfJoin(callback: Callback): any;\r\n    /** 註冊別的玩家加入房間的通知 */\r\n    public setOnOtherJoinNotice(callback: Callback): any;\r\n    /** 註冊別的玩家離開房間的通知 */\r\n    public setOnOtherLeaveNotice(callback: Callback): any;\r\n    /** 註冊別的玩家斷線的通知 */\r\n    public setOnOtherDisconnectNotice(callback: Callback): any;\r\n    /** 註冊別的玩家更新砲台的通知 */\r\n    public setOnOtherTurretUpdateNotice(callback: Callback): any;\r\n    /** 註冊別的玩家開火的通知 */\r\n    public setOnOtherFireNotice(callback: Callback): any;\r\n    /** 註冊別的玩家擊中的通知 */\r\n    public setOnHitNotice(callback: Callback): any;\r\n    /** 註冊別的玩家追加攜帶金額的通知 */\r\n    public setOnOtherAdditionCarryAmount(callback: Callback): any;\r\n    /** 註冊更換場景的通知 */\r\n    public setOnChangeScene(callback: Callback): any;\r\n    /** 註冊生魚的通知 */\r\n    public setOnFishBorn(callback: Callback): any;\r\n    /** 註冊 BOSS 出現的通知 */\r\n    public setOnBossComming(callback: Callback): any;\r\n    /** 註冊 JP 刷新通知 */\r\n    public setJackpotRefresh(callback: Callback): any;\r\n    /** 註冊 JP 中獎通知 */\r\n    public setJackpotWinning(callback: Callback): any;\r\n    /** 註冊玩家閒置通知 */\r\n    public setPlayerIdleWarn(callback: Callback): any;\r\n    /** 註冊特殊技能統計通知 */\r\n    public setFinalSkillNotice(callback: Callback): any;\r\n}"
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          2,
          "Fish_ShadowProjector",
          [
            {
              "hash": 49838041,
              "record": null,
              "name": "Fish_ShadowProjector|vs|fs",
              "glsl3": {
                "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D diffuseTexture;\nuniform Parameter{\n  float value;\n};\n#endif\nvec4 toShadow(vec4 color){\n  vec4 shadowColor = vec4(0.0, 0.0, 0.0, 0.0);\n  shadowColor.a = step(0.01, color.r) * 0.02692305;\n  return shadowColor;\n}\nvoid main () {\n  float baseWidth = value;\n  float width = 0.001953125;\n  vec4 o = toShadow(texture(diffuseTexture, v_uv0 + vec2(0.0, 0.0)));\n  width = baseWidth * 1.0;\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( -width , -width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( width , width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( width , -width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( -width , width)));\n  width = baseWidth * 2.0;\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( -width , -0.0)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( width , 0.0)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( 0.0 , -width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( 0.0 , width)));\n  width = baseWidth * 3.0;\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( -width , -width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( width , width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( width , -width)));\n  o += toShadow(texture(diffuseTexture, v_uv0 + vec2( -width , width)));\n  gl_FragColor = o;\n}"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D diffuseTexture;\nuniform float value;\n#endif\nvec4 toShadow(vec4 color){\n  vec4 shadowColor = vec4(0.0, 0.0, 0.0, 0.0);\n  shadowColor.a = step(0.01, color.r) * 0.02692305;\n  return shadowColor;\n}\nvoid main () {\n  float baseWidth = value;\n  float width = 0.001953125;\n  vec4 o = toShadow(texture2D(diffuseTexture, v_uv0 + vec2(0.0, 0.0)));\n  width = baseWidth * 1.0;\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( -width , -width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( width , width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( width , -width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( -width , width)));\n  width = baseWidth * 2.0;\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( -width , -0.0)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( width , 0.0)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( 0.0 , -width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( 0.0 , width)));\n  width = baseWidth * 3.0;\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( -width , -width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( width , width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( width , -width)));\n  o += toShadow(texture2D(diffuseTexture, v_uv0 + vec2( -width , width)));\n  gl_FragColor = o;\n}"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "USE_TEXTURE",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "CC_USE_MODEL",
                  "type": "boolean",
                  "defines": []
                },
                {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "ALPHA_TEST",
                  "binding": 0,
                  "members": [
                    {
                      "name": "alphaThreshold",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": [
                    "USE_ALPHA_TEST"
                  ]
                },
                {
                  "name": "Parameter",
                  "binding": 1,
                  "members": [
                    {
                      "name": "value",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": [
                    "USE_TEXTURE"
                  ]
                }
              ],
              "samplers": [
                {
                  "name": "texture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": [
                    "USE_TEXTURE"
                  ]
                },
                {
                  "name": "diffuseTexture",
                  "type": 29,
                  "count": 1,
                  "binding": 31,
                  "defines": [
                    "USE_TEXTURE"
                  ]
                }
              ]
            }
          ],
          [
            {
              "passes": [
                {
                  "program": "Fish_ShadowProjector|vs|fs",
                  "blendState": {
                    "targets": [
                      {
                        "blend": true
                      }
                    ]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "properties": {
                    "texture": {
                      "value": "white",
                      "type": 29
                    },
                    "alphaThreshold": {
                      "type": 13,
                      "value": [
                        0.5
                      ]
                    },
                    "diffuseTexture": {
                      "value": "white",
                      "type": 29
                    },
                    "value": {
                      "type": 13,
                      "value": [
                        0
                      ]
                    }
                  }
                }
              ]
            }
          ]
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ]
  ]
]