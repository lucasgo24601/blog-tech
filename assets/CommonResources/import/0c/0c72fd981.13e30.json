[
  1,
  [
    "1aurVMtT1GcYg9D3iLQwNj"
  ],
  [
    "_effectAsset"
  ],
  [
    [
      "cc.EffectAsset",
      [
        "_name",
        "shaders",
        "techniques"
      ],
      0
    ],
    [
      "cc.Material",
      [
        "_name",
        "_techniqueData"
      ],
      1
    ]
  ],
  [
    [
      0,
      0,
      1,
      2,
      4
    ],
    [
      1,
      0,
      1,
      3
    ]
  ],
  [
    [
      [
        [
          0,
          "StreamerShader",
          [
            {
              "hash": 2481394797,
              "record": null,
              "name": "StreamerShader|vs|fs",
              "glsl3": {
                "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform Parameter {\n  vec4 UVoffset;\n  vec4 addColor;\n  vec4 targetColor;\n  float rotated;\n  float times;\n  float slope;\n  float lightWidth;\n  float strength;\n};\nvoid main () {\n  vec2 UVnormalize = vec2(0,0);\n  UVnormalize.x = (v_uv0.x - UVoffset.x) / (UVoffset.z - UVoffset.x);\n  UVnormalize.y = (v_uv0.y - UVoffset.y) / (UVoffset.w - UVoffset.y);\n  if(rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  vec4 o = texture(texture, v_uv0);\n  if(UVnormalize.x < times - (slope * UVnormalize.y) && UVnormalize.x > times - (slope * UVnormalize.y) - lightWidth\n  ){\n    o.r += addColor.x;\n    o.g += addColor.y;\n    o.b += addColor.z;\n    o *= strength;\n  }\n  gl_FragColor = o;\n}"
              },
              "glsl1": {
                "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = pos;\n}",
                "frag": "\nprecision highp float;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 UVoffset;\nuniform vec4 addColor;\nuniform float rotated;\nuniform float times;\nuniform float slope;\nuniform float lightWidth;\nuniform float strength;\nvoid main () {\n  vec2 UVnormalize = vec2(0,0);\n  UVnormalize.x = (v_uv0.x - UVoffset.x) / (UVoffset.z - UVoffset.x);\n  UVnormalize.y = (v_uv0.y - UVoffset.y) / (UVoffset.w - UVoffset.y);\n  if(rotated > 0.5)\n  {\n    float temp = UVnormalize.x;\n    UVnormalize.x = UVnormalize.y;\n    UVnormalize.y = 1.0 - temp;\n  }\n  vec4 o = texture2D(texture, v_uv0);\n  if(UVnormalize.x < times - (slope * UVnormalize.y) && UVnormalize.x > times - (slope * UVnormalize.y) - lightWidth\n  ){\n    o.r += addColor.x;\n    o.g += addColor.y;\n    o.b += addColor.z;\n    o *= strength;\n  }\n  gl_FragColor = o;\n}"
              },
              "builtins": {
                "globals": {
                  "blocks": [
                    {
                      "name": "CCGlobal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                },
                "locals": {
                  "blocks": [
                    {
                      "name": "CCLocal",
                      "defines": []
                    }
                  ],
                  "samplers": []
                }
              },
              "defines": [
                {
                  "name": "CC_USE_MODEL",
                  "type": "boolean",
                  "defines": []
                }
              ],
              "blocks": [
                {
                  "name": "Parameter",
                  "binding": 0,
                  "members": [
                    {
                      "name": "UVoffset",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "addColor",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "targetColor",
                      "type": 16,
                      "count": 1
                    },
                    {
                      "name": "rotated",
                      "type": 13,
                      "count": 1
                    },
                    {
                      "name": "times",
                      "type": 13,
                      "count": 1
                    },
                    {
                      "name": "slope",
                      "type": 13,
                      "count": 1
                    },
                    {
                      "name": "lightWidth",
                      "type": 13,
                      "count": 1
                    },
                    {
                      "name": "strength",
                      "type": 13,
                      "count": 1
                    }
                  ],
                  "defines": []
                }
              ],
              "samplers": [
                {
                  "name": "texture",
                  "type": 29,
                  "count": 1,
                  "binding": 30,
                  "defines": []
                }
              ]
            }
          ],
          [
            {
              "passes": [
                {
                  "program": "StreamerShader|vs|fs",
                  "blendState": {
                    "targets": [
                      {
                        "blend": true
                      }
                    ]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "properties": {
                    "times": {
                      "type": 13,
                      "value": [
                        0
                      ]
                    },
                    "slope": {
                      "type": 13,
                      "value": [
                        0
                      ]
                    },
                    "lightWidth": {
                      "type": 13,
                      "value": [
                        0.15
                      ]
                    }
                  }
                }
              ]
            }
          ]
        ]
      ],
      0,
      0,
      [],
      [],
      []
    ],
    [
      [
        [
          1,
          "StreamerMaterial",
          {
            "0": {
              "defines": {}
            }
          }
        ]
      ],
      0,
      0,
      [
        0
      ],
      [
        0
      ],
      [
        0
      ]
    ]
  ]
]